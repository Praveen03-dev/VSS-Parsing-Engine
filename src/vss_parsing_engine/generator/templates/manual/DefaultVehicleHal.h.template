/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef VEHICLE_HAL_DEFAULT_VEHICLE_HAL_H_
#define VEHICLE_HAL_DEFAULT_VEHICLE_HAL_H_

#include <vhal_v2_0/VehicleHal.h>
#include <vhal_v2_0/VehiclePropertyStore.h>
#include "DefaultConfig.h"

namespace android::hardware::automotive::vehicle::V2_0::impl {

/**
 * Default Vehicle HAL implementation.
 * * This class contains the custom logic for handling VSS-generated properties.
 * Add your custom property handling logic here.
 */
class DefaultVehicleHal : public VehicleHal {
public:
    /**
     * Constructor.
     * @param propStore A pointer to the shared VehiclePropertyStore.
     */
    DefaultVehicleHal(VehiclePropertyStore* propStore);
    virtual ~DefaultVehicleHal() = default;

    // Implement VehicleHal interface
    std::vector<VehiclePropConfig> listProperties() override;
    VehiclePropValuePtr get(const VehiclePropValue& requestedPropValue,
                            StatusCode* outStatus) override;
    StatusCode set(const VehiclePropValue& propValue) override;
    StatusCode subscribe(int32_t property, float sampleRate) override;
    StatusCode unsubscribe(int32_t property) override;

private:
    // A raw pointer to the shared property store, managed by the service.
    VehiclePropertyStore* mPropStore;
};

}  // namespace android::hardware::automotive::vehicle::V2_0::impl

#endif  // VEHICLE_HAL_DEFAULT_VEHICLE_HAL_H_

