/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "DefaultVehicleHal.h"
#include "DefaultConfig.h"
#include <utils/Log.h>

namespace android::hardware::automotive::vehicle::V2_0::impl {

DefaultVehicleHal::DefaultVehicleHal(VehiclePropertyStore* propStore)
    : mPropStore(propStore) {
    // Register properties from the generated config file.
    for (const auto& config : kVehicleProperties) {
        mPropStore->registerProperty(config.config);
    }
}

std::vector<VehiclePropConfig> DefaultVehicleHal::listProperties() {
    return mPropStore->getAllConfigs();
}

VehicleHal::VehiclePropValuePtr DefaultVehicleHal::get(
    const VehiclePropValue& requestedPropValue,
    StatusCode* outStatus) {
    // This is the core logic for property retrieval.
    // In a real implementation, this would involve reading from the hardware bus.
    // For a simulator, it reads from the in-memory store.

    auto value = mPropStore->readValueOrNull(requestedPropValue);

    if (value) {
        *outStatus = StatusCode::OK;
        return value;
    } else {
        *outStatus = StatusCode::NOT_AVAILABLE;
        return nullptr;
    }
}

StatusCode DefaultVehicleHal::set(const VehiclePropValue& propValue) {
    // This is the core logic for setting a property.
    // In a real implementation, this would involve writing to the hardware bus.
    // For a simulator, it writes to the in-memory store.

    if (mPropStore->writeValue(propValue, false)) {
        return StatusCode::OK;
    } else {
        return StatusCode::INTERNAL_ERROR;
    }
}

StatusCode DefaultVehicleHal::subscribe(int32_t property, float sampleRate) {
    // Add your custom subscription logic here if needed.
    // For a simulator, you might start a timer to generate fake data.

    // Default implementation: assumes the manager handles it.
    return StatusCode::OK;
}

StatusCode DefaultVehicleHal::unsubscribe(int32_t property) {
    // Add your custom unsubscription logic here.
    // For a simulator, you might stop a timer.
    
    // Default implementation: assumes the manager handles it.
    return StatusCode::OK;
}

}  // namespace android::hardware::automotive::vehicle::V2_0::impl

