/*
 * This file is automatically generated. Do not modify.
 *
 * Generated from VSS file at {{ vss_file_path }}
 */
#ifndef VEHICLE_HAL_DEFAULT_CONFIG_H_
#define VEHICLE_HAL_DEFAULT_CONFIG_H_

#include <vhal_v2_0/types.h>
#include <map>

namespace android::hardware::automotive::vehicle::V2_0::impl {

struct ConfigDeclaration {
    VehiclePropConfig config;
    VehiclePropValue::RawValue initialValue;
    std::map<int32_t, VehiclePropValue::RawValue> initialAreaValues;
};

// This array contains the configuration for all supported VHAL properties.
const ConfigDeclaration kVehicleProperties[] = {
{% for p in properties %}
    {
        .config = {
            .prop = toInt(VehicleProperty::{{ p.vhal_id }}),
            .access = VehiclePropertyAccess::{{ p.vhal_access|upper }},
            .changeMode = VehiclePropertyChangeMode::{{ p.vhal_change_mode|upper }},
        {% if p.vhal_change_mode|upper == 'CONTINUOUS' %}
            .minSampleRate = {{ p.min_sample_rate | d('0.0f') }},
            .maxSampleRate = {{ p.max_sample_rate | d('10.0f') }},
        {% endif %}
        {% if p.vhal_area|upper != 'GLOBAL' %}
            .areaConfigs = {
                VehicleAreaConfig {
                {% if p.vhal_area|upper == 'WHEEL' %}
                    .areaId = VehicleAreaWheel::LEFT_FRONT,
                {% elif p.vhal_area|upper == 'SEAT' %}
                    .areaId = VehicleAreaSeat::ROW_1_LEFT,
                {% elif p.vhal_area|upper == 'DOOR' %}
                    .areaId = VehicleAreaDoor::ROW_1_LEFT,
                {% else %}
                    .areaId = VehicleArea::{{ p.vhal_area|upper }},
                {% endif %}
                {% if p.min_value is defined and p.min_value is not none %}
                    .min{{ p.vhal_type }}Value = {{ p.min_value }},
                {% endif %}
                {% if p.max_value is defined and p.max_value is not none %}
                    .max{{ p.vhal_type }}Value = {{ p.max_value }},
                {% endif %}
                },
            },
        {% endif %}
        {% if p.area_configs and p.area_configs|length > 0 %}
            .areaConfigs = {
            {% for area in p.area_configs %}
                VehicleAreaConfig {
                    .areaId = {{ area.area_id }},
                {% if area.min_value is not none %}
                    .min{{ p.vhal_type }}Value = static_cast<{{ p.vhal_cpp_type }}>(
                        {{ area.min_value }}),
                {% endif %}
                {% if area.max_value is not none %}
                    .max{{ p.vhal_type }}Value = static_cast<{{ p.vhal_cpp_type }}>(
                        {{ area.max_value }}),
                {% endif %}
                },
            {% endfor %}
            },
        {% endif %}
        {% if p.config_array and p.config_array|length > 0 %}
            .configArray = {
            {% for item in p.config_array %}
                {{ item }},
            {% endfor %}
            },
        {% endif %}
        },
        // Initial value for {{ p.path }}
        .initialValue = {
        {% if p.vhal_type|upper == 'BOOLEAN' %}
            .int32Values = { static_cast<int32_t>({{ p.initial_value | d(0) }}) },
        {% elif p.vhal_type|upper == 'INT32' %}
            .int32Values = { static_cast<int32_t>({{ p.initial_value | d(0) }}) },
        {% elif p.vhal_type|upper == 'INT64' %}
            .int64Values = { static_cast<int64_t>({{ p.initial_value | d(0) }}) },
        {% elif p.vhal_type|upper == 'FLOAT' %}
            .floatValues = { static_cast<float>({{ p.initial_value | d(0.0) }}) },
        {% elif p.vhal_type|upper == 'STRING' %}
            .stringValue = "{{ p.initial_value | d('') }}",
        {% elif p.vhal_type|upper == 'INT32_VEC' %}
            .int32Values = {
            {% for val in p.initial_value %}
                static_cast<int32_t>({{ val }}),
            {% endfor %}
            },
        {% elif p.vhal_type|upper == 'FLOAT_VEC' %}
            .floatValues = {
            {% for val in p.initial_value %}
                static_cast<float>({{ val }}),
            {% endfor %}
            },
        {% else %}
            // Fallback for unsupported or unknown types
        {% endif %}
        },
    },
{% endfor %}
};

}  // namespace android::hardware::automotive::vehicle::V2_0::impl
#endif  // VEHICLE_HAL_DEFAULT_CONFIG_H_